version: '3.8'

services:
  # Nginx 리버스 프록시 서버
  nginx:
    image: nginx:alpine    # 경량화된 Nginx 이미지 사용
    ports:
      - "80:80"           # HTTP 포트
      - "443:443"         # HTTPS 포트
    volumes:              # 설정 파일 및 인증서 마운트
      - ../config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../config/nginx/conf.d:/etc/nginx/conf.d:ro
      - /data/certs:/etc/nginx/certs:ro
      - /data/logs/nginx:/var/log/nginx
    depends_on:
      - nextjs
      - nestjs
      - python
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Next.js 프론트엔드 애플리케이션
  nextjs:
    build:
      context: ../apps/nextjs    # 빌드 컨텍스트 설정
      dockerfile: Dockerfile
    env_file: ../.env            # 환경변수 파일 로드
    volumes:                      # 애플리케이션 및 데이터 마운트
      - ../apps/nextjs:/app      # 소스코드 마운트
      - /data/nextjs/node_modules:/app/node_modules  # 의존성 모듈
      - /data/nextjs/.next:/app/.next                # Next.js 빌드 결과물
      - /data/logs/nextjs:/app/logs                  # 로그 파일
    environment:                  # 환경변수 설정
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://nest-demo.local/api}
      - PORT=${NEXT_PORT:-3000}
      - APP_NAME=${NEXT_APP_NAME:-nextjs-demo}
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000

  # Nest.js 백엔드 API 서버
  nestjs:
    build:
      context: ../apps/nestjs
      dockerfile: Dockerfile
    env_file: ../.env
    volumes:
      - ../apps/nestjs:/app                        # 소스코드 마운트
      - /data/nestjs/node_modules:/app/node_modules  # 의존성 모듈
      - /data/nestjs/dist:/app/dist                  # 빌드 결과물
      - /data/logs/nestjs:/app/logs                  # 로그 파일
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=${NEST_DATABASE_URL}          # 데이터베이스 연결 정보
      - JWT_SECRET=${NEST_JWT_SECRET}             # JWT 암호화 키
      - PORT=${NEST_PORT:-3001}
      - APP_NAME=${NEST_APP_NAME:-nestjs-demo}
    networks:
      - app-net
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000

  # Python FastAPI 백엔드 서버
  python:
    build:
      context: ../apps/python
      dockerfile: Dockerfile
    env_file: ../.env
    volumes:
      - ../apps/python:/app                      # 소스코드 마운트
      - /data/python/venv:/app/venv              # Python 가상환경
      - /data/logs/python:/app/logs              # 로그 파일
    environment:
      - PYTHONUNBUFFERED=1                       # Python 출력 버퍼링 비활성화
      - DEBUG=${PYTHON_DEBUG:-0}                 # 디버그 모드 설정
      - DATABASE_URL=${PYTHON_DATABASE_URL}      # 데이터베이스 연결 정보
      - PORT=${PYTHON_PORT:-8000}
      - APP_NAME=${PYTHON_APP_NAME:-python-demo}
      - SECRET_KEY=${PYTHON_SECRET_KEY}
    networks:
      - app-net
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000

# 도커 네트워크 설정
networks:
  app-net:                # 애플리케이션 내부 네트워크
    driver: bridge        # 브릿지 네트워크 드라이버 사용
